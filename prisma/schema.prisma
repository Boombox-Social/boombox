generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  name           String
  role           UserRole  @default(SMM)
  avatar         String?
  isActive       Boolean   @default(true)
  lastLogin      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  password       String
  clients        Client[]
  createdClients Client[]  @relation("ClientCreator")

  @@map("users")
}

model Client {
  id                   Int      @id @default(autoincrement())
  logo                 String?
  name                 String
  address              String?
  industry             String?
  slogan               String?
  links                String[]
  coreProducts         String[]
  idealCustomers       String?
  brandEmotion         String?
  uniqueProposition    String?
  whyChooseUs          String?
  mainGoal             String?
  shortTermGoal        String?
  longTermGoal         String?
  competitors          String[]
  indirectCompetitors  String[]
  brandAssets          String[]
  fontUsed             String[]
  smmDriveLink         String?
  contractDeliverables String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  assignedUserId  Int? // Keep existing field
  assignedUser    User?        @relation(fields: [assignedUserId], references: [id])
  assignedUserIds Int[]        @default([]) // NEW: Array of all assigned SMM user IDs
  createdById     Int // User who created this client
  createdBy       User         @relation("ClientCreator", fields: [createdById], references: [id])
  ClientLinks     ClientLinks? @relation(fields: [clientLinksId], references: [id])
  clientLinksId   Int?

  @@map("clients")
}

//Links for the cards on client info dashboard
model ClientLinks {
  id                  Int      @id @default(autoincrement())
  clientId            Int
  strategyAiLink      String?
  businessSummaryLink String?
  basecampLink        String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  Client              Client[]

  @@map("client_links")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SMM
}

model ArchivedClient {
  id                   Int      @id @default(autoincrement())
  originalClientId     Int // Reference to the original client
  logo                 String?
  name                 String
  address              String?
  industry             String?
  slogan               String?
  links                String[]
  coreProducts         String[]
  idealCustomers       String?
  brandEmotion         String?
  uniqueProposition    String?
  whyChooseUs          String?
  mainGoal             String?
  shortTermGoal        String?
  longTermGoal         String?
  competitors          String[]
  indirectCompetitors  String[]
  brandAssets          String[]
  fontUsed             String[]
  smmDriveLink         String?
  contractDeliverables String?
  archivedAt           DateTime @default(now())
  assignedUserIds      Int[]
  createdById          Int
  clientLinksId        Int?
  // Optionally, add a relation to User if you want to track who archived
  // archivedById         Int?
  // archivedBy           User? @relation(fields: [archivedById], references: [id])

  @@map("archived_clients")
}
